#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <netinet/in.h>
#include <stdlib.h>

#define _PORT_ 9999
#define _BACKLOG_ 10
//多进程版本，多个进行通信。进程增多，CPU切换周期时间变长，影响性能。

void Request(int client_fd,struct sockaddr_in *client_socket)
{
	char buf[1024];
	for(;;)
	{
		ssize_t read_size=read(client_fd,buf,sizeof(buf));
		if(read_size<0)
		{
			perror("read");
			continue;
		}
		else if(read_size==0)
		{
			printf("client:%s quit!\n",inet_ntoa(client_socket->sin_addr));
			close(client_fd);
			break;
		}
		else
		{
			buf[read_size]='\0';
			printf("client:%s say:%s\n",inet_ntoa(client_socket->sin_addr),buf);
			write(client_fd,buf,strlen(buf));
		}
	}
}


void CreateWorker(int client_fd,struct sockaddr_in* client_socket)
{
	pid_t pid=fork();
	if(pid<0)
	{
		perror("fork");
		return;
	}
	else if(pid==0)
	{
		if(fork()==0)  //孙子进程
		{
			Request(client_fd,client_socket);
		}
		//不能在子进程中执行，父进程会阻塞式的等待子进程，而不能去处理其他事情，虽然父进程可以非阻塞式的轮询，但这样实现比较麻烦，
    //当然可以使用SIGCHLD信号，自己定义信号操作函数，自动回收子进程资源。所以最好的方法是将此任务交给孙子进程，子进程立刻退出
		//父进程进行回收，那么父进程就可以处理其他连接请求。子进程立刻退出后，孙子进程变为了孤儿进程，由1号进程回收。
		exit(0);  //子进程退出
	}
	else
	{
		close(client_fd);
		waitpid(pid,NULL,0);  //父进程等待
	}
	return;
}

int main()
{
	int sock=socket(AF_INET,SOCK_STREAM,0); //拉客
	if(sock<0)
	{
		printf("create sock error,error is :%d,errstring is :%s\n",errno,strerror(errno));
	}
	struct sockaddr_in server_socket;
	bzero(&server_socket,sizeof(server_socket));  //结构体初始化
	server_socket.sin_family=AF_INET;
	server_socket.sin_port=htons(_PORT_);
	server_socket.sin_addr.s_addr=htonl(INADDR_ANY);  //是一个宏表示本地的任意IP地址，里面放的全是0
	//只要是发往本台服务器上的任意IP地址，数据都可以进行接收处理。

	if(bind(sock,(struct sockaddr*)&server_socket,sizeof(struct sockaddr_in))<0)
	{
		printf("create bind error,error is %d,errstring is %s\n",errno,strerror(errno));
		close(sock);
		return 1;
	}

	if(listen(sock,_BACKLOG_)<0)  //等待队列设为5-10为宜
	{
		printf("create listen is error,error is %d,errstring is %s\n",errno,strerror(errno));
		close(sock);
		return 2;
	}
	printf("bind and listen is success,wait accept...\n");
	
	for(;;)
	{
		struct sockaddr_in client_socket;
		socklen_t len=sizeof(client_socket);
		int client_sock=accept(sock,(struct sockaddr*)&client_socket,&len);  //服务员，真正提供服务的，阻塞式等待用户。也是fd
		if(client_sock<0)
		{
			printf("create client_sock is error,error is %d,errstring is %s\n",errno,strerror(errno));
			continue;
		}
		CreateWorker(client_sock,&client_socket);  
	}
	return 0;
}
